using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Neo4jClient;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Reflection;

namespace Dynamo_Neo4j_Connection_New_Development
{
    class Program
    {
        static void Main(string[] args)
        {
            var client = new GraphClient(new Uri("http://localhost:7474/db/data"), "neo4j", "250daowohao");
            client.Connect();

            Console.WriteLine(client.IsConnected); // Test the connection status with the Neo4j server. 

            List<List<string>> facility = new List<List<string>>();

            List<string> arr = new List<string>();

            string str = " {'BuildingName':' liu' , 'ProjectName':' wan'} ";

            arr.Add(str);
            facility.Add(arr);

            List<string> ifc_GUID = new List<string>();
            ifc_GUID.Add("123");

            string newStr = string.Join("", facility[0].ToArray());
            Console.WriteLine(newStr);

            string str1 = string.Join("", arr);

            for (int i = 0; i < ifc_GUID.Count; i += 1)
            {

                Facility facilityJson = JsonConvert.DeserializeObject<Facility>(string.Join("", facility[i].ToArray())); // Transform Json string to .NET objet
                facilityJson.GUID = ifc_GUID[i];

                Console.WriteLine(facilityJson.ProjectName);

                
                //Two points need to be aware: 1.{{ and }} will be format as string { and }  2. The value must be put ''. Even it is alreay a string.
                string MergeData2 = string.Format("(facility:FACILITY  {{ Name:'{0}', ProjectName:'{1}', GUID:'{2}'  }})", facilityJson.BuildingName, facilityJson.ProjectName, facilityJson.GUID);
                Console.WriteLine(MergeData2);
                
                client.Cypher
                    .Merge(MergeData2)  
                    .ExecuteWithoutResults();
            }

            

        }
    }


    public class COBie
    {
        public static void Merge(List<List<string>> facilityData, List<string> ifc_GUID) //Difference between list<string> and string[] ???
        {
            var client = new GraphClient(new Uri("http://localhost:7474/db/data"), "neo4j", "250daowohao");
            client.Connect();

            //Documentation
            /**Variable List
             * 
             * facilityData :                       Input from Dynamo. A List of all the element data in a particular Revit category.
             * ifc_GUID : Input from Dynamo.        A List of ifc type GUID, corresponed to the facilityData.
             * strFromRevitToRevitParameter:        A processed Json-format string, containing the facilityData and ifc_GUID.
             * 
             * strFromRevitToCOBieParameter:        Same as strFromRevitToRevitParameter, but just map the Revit parameters to COBie parameters.
             * jObjectFromRevitWithCOBieParameter:  JObject from above.
             * 
             * strFromNeo4jToCOBieParameter:        Json-format string from object in DB.
             * jObjectFromNeo4jWithCOBieParameter:  JObject from above.
             * 
             * compareNeo4jAndRevit:                Compare the incoming data with DB data, to determine whether to update data or not.
             * facilityObjWithRevitParameter:       Facility-type Object storing Revit-parameter data, generated by JsonConvert.
             * 
             * neo4jObject:                         Neo4j with Lable Match
             * neo4jObjectMatchWithGUID:            Neo4j with detailed Where Match.
             * facility:                            Identifier in Cypher statement.
             * newfacility:                         Replacement object.
             * MergeData2:                          Cypher statement for Merge.
             

            **/

            /**Class List
             * Facility:                            A class used for declaring an Object instance which is for storing Revit-parameter data. And assign the data to Cypher statement eventually.
             * FACILITY:                            A Neo4j Lable class for enabling data fetch from DB.

            **/

            /**Adopt to other Tab
             * facilityData :                    --> classData.
             * facility :                        --> class lower case.
             * FACILITY :                        --> CLASS upper case.
             * newfacility :                     --> newclass.
             * facilityObjWithRevitParameter:    --> classObjWithRevitParameter
             * strFromRevitToCOBieParameter:     Make a new mapping. 
             * MergeData2:                       Make a new statement.
            
            **/


            string str1 = "";
            string str2 = "";
            string str3 = "";
            string str4 = "";
            string strFromRevitToRevitParameter = "";
            string strFromRevitToCOBieParameter = "";

            Boolean compareNeo4jAndRevit = true;

            Neo4jClient.Cypher.ICypherFluentQuery neo4jObject = null;
            Neo4jClient.Cypher.ICypherFluentQuery neo4jObjectMatchWithGUID = null;
            IEnumerable<FACILITY> results = null;


            for (int i = 0; i < ifc_GUID.Count; i += 1)
            {

                // 1. Transform Json string to .NET objet  
                // 2. facility[i] is a List, we convert it to Array and then to string. Because JsonConvert can only convert string format to c# object.
                // 3. facility is accepting element parameters. It is in a format of List--List0(key:value...), List1(key:value...)... So it is a List<List<string>>

                //Process original string to Json string. e.g: "{key1:value1, key2:value2}"  to "{key1:'value1',key2:'value2'}". 
                //As a consequence, we can use JsonConvert to convert this Json string to c# object.
                str1 = string.Join("", facilityData[i]);//Convert array to string
                str2 = str1.Replace(" ", "");  //Eliminate space.
                str3 = str2.Replace(":", ":'"); //Replace : with :'
                str4 = str3.Replace(",", "',"); //Replace , with ',
                strFromRevitToRevitParameter = str4.Insert(str4.Length - 1, "'"); // Insert ' in the end. 

                //Claim a object instance from Facility class, with parameters from Json.
                Facility facilityObjWithRevitParameter = JsonConvert.DeserializeObject<Facility>(strFromRevitToRevitParameter);
                facilityObjWithRevitParameter.GUID = ifc_GUID[i];

                //Map the revit parameter to cobie parameter. Because strFromRevitToRevitParameter dont have GUID parameter, so we use the method below to have the full string.
                strFromRevitToCOBieParameter = JsonConvert.SerializeObject(facilityObjWithRevitParameter).ToString().Replace("BuildingName", "Name");

                //Two points need to be aware: 1.{{ and }} will be format as string { and }  2. The value must be put ''. Even it is alreay a string.
                string MergeData2 = string.Format("(facility:FACILITY  {{ Name:'{0}', ProjectName:'{1}', GUID:'{2}'  }})", facilityObjWithRevitParameter.BuildingName, facilityObjWithRevitParameter.ProjectName, facilityObjWithRevitParameter.GUID);

                //Fetch the facility data from Neo4j according to the unique GUID.
                //results is a "List" of returned data. But in our case, the results "List" only have one item, because we fetch the object node by a unique GUID. So there will be only one object returned by.
                neo4jObject = client.Cypher.Match("(facility:FACILITY)");
                neo4jObjectMatchWithGUID = neo4jObject.Where((FACILITY facility) => facility.GUID == facilityObjWithRevitParameter.GUID);
                results = neo4jObjectMatchWithGUID.Return(facility => facility.As<FACILITY>()).Results;

                //Make statement check. If results have no item which means there is no that object in Neo4j so that we need to create it or merge.
                if (results.Count<FACILITY>()==0)
                {
                    client.Cypher
                   .Merge(MergeData2)
                   .ExecuteWithoutResults();

                }

                //If results contain items which means there exist this object we are fetching in Neo4j. 
                //So we need to check if update is needed or not.
                else
                {
                    //Convert the Neo4j object to Json format string.
                    string strFromNeo4jToCOBieParameter = JsonConvert.SerializeObject(results.ToList<FACILITY>()[0]);

                    //Convert the Neo4j object string to JObject.
                    JObject jObjectFromNeo4jWithCOBieParameter = JsonConvert.DeserializeObject<JObject>(strFromNeo4jToCOBieParameter);
                    //Convert the incoming string to JObject.
                    JObject jObjectFromRevitWithCOBieParameter = JsonConvert.DeserializeObject<JObject>(strFromRevitToCOBieParameter);

                    //Use JToken method to compare two JObject. 
                    //If there are the same, then no need to update. 
                    //If they are different which means the incoming string is different from its associated object data stored in Neo4j. Which means, the BIM model is changed somewhere and the data need to update.
                    compareNeo4jAndRevit = JToken.DeepEquals(jObjectFromNeo4jWithCOBieParameter, jObjectFromRevitWithCOBieParameter);

                    if (compareNeo4jAndRevit)
                    {
                        return;

                    }
                    else
                    {
                        //Update all the properties to the existing object in Neo4j.
                        neo4jObjectMatchWithGUID.Set("facility={newfacility}")
                           //Use param to pass the value. The grammer is .WithParam("paramName",Object). 
                           //So we use JsonConvert to convert the Json format incoming string to a FACILITY type object.
                          .WithParam("newfacility", JsonConvert.DeserializeObject<FACILITY>(strFromRevitToCOBieParameter))
                          .ExecuteWithoutResults();

                    }

                }
               
            }


        }
    }


    public class Test
    {
        public static string Merge(List<List<string>> facility, List<string> ifc_GUID) //Difference between list<string> and string[] ???
        {
            string data2 = "";
            string str1 = "";
            string str2 = "";
            string str3 = "";
            string str4 = "";
            string str5 = "";

            for (int i = 0; i < ifc_GUID.Count; i += 1)
            {

                // 1. Transform Json string to .NET objet  2. facility[i] is a List, we convert it to Array and then to string. Because JsonConvert can only convert string format to c# object.
                // 3. facility is accepting element parameters. It is in a format of List--List0(key:value...), List1(key:value...)... So it is a List<List<string>>
                str1 = string.Join("", facility[i]);
                str2 = str1.Replace(" ", "");
                str3 = str2.Replace(":", ":'");
                str4 = str3.Replace(",","',");
                str5 = str4.Insert(str4.Length-1,"'");

                Facility facilityJson = JsonConvert.DeserializeObject<Facility>(str5);
                facilityJson.GUID = ifc_GUID[i];

                Console.WriteLine(facilityJson.ProjectName);


                //Two points need to be aware: 1.{{ and }} will be format as string { and }  2. The value must be put ''. Even it is alreay a string.
                data2 = string.Format("(facility:FACILITY  {{ Name:'{0}', ProjectName:'{1}', GUID:'{2}'  }})", facilityJson.BuildingName, facilityJson.ProjectName, facilityJson.GUID);
                
 
            }

            return data2;
        }
    }








    // Class to store Json data from Revit 

    public class Facility
    {

        public string BuildingName; //---Map to COBie---  Name
        public string ProjectName;//---Map to COBie--- ProjectName
        public string GUID;


        public Facility(string _BuildingName, string _ProjectName)
        {
            this.BuildingName = _BuildingName;
            this.ProjectName = _ProjectName;

        }
    }


    public class Floor
    {
        public string Name;//---Map to COBie---  Name
        public string Category;//---Map to COBie---  Name
        public string Elevation; //---Map to COBie---  Name

        public Floor(string _Name, string _Category, string _Elevation)
        {
            this.Name = _Name;
            this.Category = _Category;
            this.Elevation = _Elevation;

        }
    }


    public class Space
    {
        public string Name; //---Map to COBie---  Name
        public string Number; //---Map to COBie---  Name
        public string Category; //---Map to COBie---  Name
        public string CategoryDescription;//---Map to COBie---  Name
        public string Level; //---Map to COBie---  Name
        public string RoomTag; //---Map to COBie---  Name
        public string UnboundedHeight; //---Map to COBie---  Name
        public string Area;//---Map to COBie---  Name


        public Space(string _Name, string _Number, string _Category, string _CategoryDescription, string _Level, string _RoomTag, string _UnboundedHeight, string _Area)
        {
            this.Name = _Name;
            this.Number = _Number;
            this.Category = _Category;
            this.CategoryDescription = _CategoryDescription;
            this.Level = _Level;
            this.RoomTag = _RoomTag;
            this.UnboundedHeight = _UnboundedHeight;
            this.Area = _Area;


        }
    }


    public class Component
    {
        public string FamilyandType; //---Map to COBie---  Name
        public string Category; //---Map to COBie---  Name
        public string Room; //---Map to COBie---  Name
        public string SerialNumber; //---Map to COBie---  Name
        public string InstallationDate; //---Map to COBie---  Name
        public string WarrantyStartDate; //---Map to COBie---  Name
        public string TagNumber; //---Map to COBie---  Name
        public string BarCode; //---Map to COBie---  Name
        public string AssetIdentifier; //---Map to COBie---  Name


        public Component(string _FamilyandType, string _Category, string _Room, string _SerialNumber, string _InstallationDate, string _WarrantyStartDate, string _TagNumber, string _BarCode, string _AssetIdentifier)
        {
            this.FamilyandType = _FamilyandType;
            this.Category = _Category;
            this.SerialNumber = _SerialNumber;
            this.InstallationDate = _InstallationDate;
            this.WarrantyStartDate = _WarrantyStartDate;
            this.TagNumber = _TagNumber;
            this.BarCode = _BarCode;
            this.AssetIdentifier = _AssetIdentifier;

        }
    }


    //Class for Neo4j label, in order to enable the data fetch from Neo4j. (Use COBie parameter)
    public class FACILITY
    {

        public string Name { get; set; }
        public string ProjectName { get; set; }
        public string GUID { get; set; }
    }



}
